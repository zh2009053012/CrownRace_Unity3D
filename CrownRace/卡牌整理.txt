卡牌类型、值、作用目标、值

UseCardData{
	user;
	card_type;
	effect_value;

	targets;
	select_target_method;
	targets_num;
}

卡牌类型：
1、后退
2、前进
3、投掷骰子前进
4、投掷骰子，根据结果后退

5、失去手中第一张卡牌 
6、抽取玩家的卡牌 n张

7、交换位置
8、暂停
9、抽取卡牌

10、反弹卡牌效果
11、格挡特殊格子效果
12、解除卡牌效果
13、格挡卡牌效果

作用目标：   	值     			判断方法
1、手动选择  		value=1			none
2、自己 			value=1			none
3、后边的玩家 	value=1-3		none
4、其他玩家 		value = 1-3		none
5、前方n格范围 	value=n  		<=
6、手中持有的卡牌数 value=n       >=
7、任意玩家      value=1          none
8、落在有标记格子的玩家 value=0-4    none
9、前面的玩家    value=1-3 			none

需要的消息:
1、服务器推送消息，客户端只需要负责播放:  message_ntf
2、服务器控制骰子是否可以投掷： set_dice_btn_state_ntf  
3、客户端发送使用的卡牌数据给服务器: use_card_req
//4、服务器发送卡牌是否使用成功 use_card_ack
5、服务器同步控制玩家移动： move_player_ntf
6、服务器同步投掷骰子： update_dice_ntf
7、服务器控制玩家的卡牌： remove_player_card_ntf add_player_card_ntf
8、服务器设置玩家状态显示： set_player_state_ntf (暂停、buff效果)
9、客户端发送投掷骰子请求： roll_dice_req
//10、服务器同步骰子状态： set_dice_state_ntf
11、客户端请求结束回合：end_round_req

A\B 两个玩家回合流程:
0、生成地图、骰子（地图和骰子应该是一个单例资源），服务器按连接数生成玩家，获取到各个玩家的位置和旋转，并广播给所有玩家。五秒后继续下一步。
1、服务器选择下一个玩家，服务器广播轮到A玩家，服务器记录当前回合是哪个玩家。
2、A玩家可投掷骰子，B玩家不可投掷骰子。
3、服务器等待状态：

4、A玩家回合：


A玩家使用卡牌阶段：
1、A玩家发送数据给服务器
2、服务器筛选出目标玩家，如果筛选失败则发送使用失败，成功则发送成功。
3、服务器广播某玩家对谁（如果有明确作用目标）使用什么卡牌的消息。（如果卡牌类型为陷阱，则显示神秘卡牌）
4、判断目标玩家是否有反弹buff，若有，则修改作用目标，并广播消息。
5、根据下列类型进行处理

1、后退 服务器广播玩家后退多少格的消息，服务器获取路径，服务器同步目标玩家的位置给所有玩家
2、前进 同上；
3、投掷骰子前进  服务器投掷骰子，同步骰子数据给所有玩家，获得投掷结果后，广播玩家前进多少格的消息，服务器获得路径，服务器同步目标玩家的位置给所有玩家。
4、投掷骰子，根据结果后退。 同上；
服务器获取移动了位置的玩家的当前位置，获取当前格子类型，发送通知，按移动、暂停处理。

5、失去手中第一张卡牌 服务器广播某玩家失去卡牌的消息。
6、抽取玩家的卡牌 n张 服务器广播某玩家失去卡牌，某玩家获得卡牌的消息。

7、交换位置 服务器广播哪个玩家和哪个玩家交换位置的消息。
8、暂停 服务器广播哪个玩家暂停多少回合的消息。
9、抽取卡牌 服务器广播某玩家抽取卡牌的消息，并下发获得的卡牌。

10、反弹卡牌效果（不能反弹交换位置）  服务器广播某玩家使用完毕的消息，显示buff图标。
11、格挡特殊格子效果 同上。
12、解除卡牌效果 服务器检查目标玩家当前是否处于暂停状态，若是，则取消暂停。
13、格挡卡牌效果 同上。

6、使用完毕后，服务器通知客户端可以使用骰子。

玩家点击投掷骰子按钮，发送投掷命令给服务器，进入下面阶段
A玩家投掷骰子阶段：
1、A玩家投掷骰子，服务器执行投掷骰子命令，并广播骰子的位置和旋转。
2、服务器得到骰子结果。
3、服务器广播A移动n格的消息。
4、服务获取A从当前位置移动到目的地的路径
5、服务器同步A的位置给所有玩家
6、同步完毕后，服务器获取A玩家当前的格子。按格子类型进行处理：

前进：重复3456
后退：重复3456
暂停：服务器广播A玩家暂停n回合的消息。

投掷骰子阶段结束，服务器发送消息告诉客户端可以使用卡牌。

A玩家使用卡牌阶段：

5、A玩家发送结束回合消息。
6、回到循环1

全局消息：
1、服务器收到玩家X的退出消息或者异常退出消息：
2、判断玩家X是否是当前回合的玩家：
是：
否：删除玩家的数据，并广播给所有玩家
3、客户端收到某个玩家退出的消息，判断是不是自己：
是：退出游戏场景
否：删除玩家数据
